<%= render "shared/main_header" %>

<div class="main-container">
    <div class="body-top-wrapper">
        <% if user_signed_in? %>
          <div class="login_user_name">ログイン中 <%= current_user.first_name  %></div>
        <% else %>
          <div class="login_user_name">ログインしていません</div>
        <% end %>
        <% if user_signed_in? && current_user.admin_true == true %>
          <%= link_to "+スケジュールを追加" , clients_info_index_path ,class:"add-schedule-btn" %>
        <% end %>
    </div>
    <div id="app">
    <div v-if="loading">ページをリロードしてください </div>
    <div v-else="loading">
      <div id="gantt-content" class="gantt-content">
        <div class="gantt-task" ref="task">
          <div class="gantt-task-title" >
            <div class="task-item">顧客名</div>
            <% (1..10).each do |i| %>
              <% column_name = "clients_info#{i}_name" %>
                <% if @client_info_name[column_name].present? %>
                  <div class="task-item"><%= @client_info_name[column_name] %></div>
                <% end %>
            <% end %>
          </div>
        </div>
        <div id="gantt-calendar" class="gantt-calendar" :style="`width:${calendarViewWidth}px`" ref="calendar">
          <div id="gantt-date" class="gantt-date">
            <div class="gantt-year-month">
              <div v-for="(calendar,index) in calendars" :key="index">
                <div class="calendar-date" :style="`width:${calendar.calendar*block_size}px;left:${calendar.start_block_number*block_size}px`">
                  {{calendar.date}}
                </div>
              </div>
            </div>
          </div>
          <div id="gantt-day" class="gantt-day">
            <div v-for="(calendar,index) in calendars" :key="index">
              <div v-for="(day,index) in calendar.days" :key="index">
                <div class="day-blocks" :class="{'saturday': day.dayOfWeek === '土', 'sunday': day.dayOfWeek ==='日' , 'today-pos': calendar.year=== today.year() && calendar.month === today.month() && day.day === today.date()}" :style="`width:${block_size}px;left:${day.block_number*block_size}px`">
                  <span>{{ day.day }}</span>
                  <span>{{ day.dayOfWeek }}</span>
                </div>
              </div>
            </div>
          </div>
          <div id="gantt-height" class="gantt-height">
            <div v-for="(calendar,index) in calendars" :key="index">
              <div v-for="(day,index) in calendar.days" :key="index">
                <div class="border-height" :class="{'saturday': day.dayOfWeek === '土', 'sunday': day.dayOfWeek ==='日'}" :style="`width:${block_size}px;left:${day.block_number*block_size}px;height:${calendarViewHeight}px`">

                </div>
              </div>
            </div>
          </div>
          <div id="gantt-bar-area" class="gantt-bar-area" :style="`width:${calendarViewWidth}px;height:${calendarViewHeight}px`">
          </div>
        </div>
      </div>
    </div>
    </div>

</div>

<div class="sidebar" id="sidebar">
  <div class="comment-list">
  </div>
  <%= form_with url:comments_path, method: :post, id:"comment_form" , class:"comment_form" do |f| %>
    <%= f.text_field :comment , class:"comment_input" , id:"comment_input" %>
    <%= f.submit '投稿' , class:"comment_btn" , id:"comment_btn" %>
  <% end %>
</div>

<% if user_signed_in? %>
  <div id="openButton">< COMMENTS</div>
  <!-- <div id="under_openButton">^ 負荷量 ^</div> -->
<% end %>

<script>
  document.getElementById('comment_btn').addEventListener('submit', (e) =>{
    console.log("test")
  });

  document.getElementById('openButton').addEventListener('click', function() {
    const sidebar = document.getElementById('sidebar');
    const comment_btn = document.getElementById('openButton');
    if (sidebar.style.width == '0px' || sidebar.style.width == '') {
      sidebar.style.width = '350px';
      sidebar.style.right = '0';
      comment_btn.style.right = '350px';
    } else {
      sidebar.style.width = '0';
      sidebar.style.right = '-350px';
      comment_btn.style.right = '0';
    }
  });

  const app = Vue.createApp({
    data(){
      return{
        loading:true,
        data:null,
        start_month:'',
        end_month:'',
        block_size:25,
        block_number:0,
        calendars:[],
        inner_width: '',
        inner_height: '',
        task_width: '',
        task_height: '',
        today:moment(),
      };
    },
    methods:{
      async fetchData() {
        try {
          const response = await fetch('https://jsonplaceholder.typicode.com/todos');
          const result = await response.json();
          
          this.data = result;
        } catch (error) {
          console.error('データの取得に失敗しました。ページをリロードしてください', error);
          this.reloadOnCatch();
        } finally {
          this.loading = false;
        }
      },
      reloadOnCatch() {
        window.location.reload();
      },
      getDays(year, month, block_number) {
        const dayOfWeek = ['日', '月', '火', '水', '木', '金', '土'];
        let days = [];
        let date = moment(`${year}-${month}-01`);
        let num = date.daysInMonth();
        for (let i = 0; i < num; i++) {
          days.push({
            day: date.date(),
            dayOfWeek: dayOfWeek[date.day()],
            block_number
          })
          date.add(1, 'day');
          block_number++;
        }
        return days;
      }, 
      getCalendar() {
        let block_number = 0;
        let days;
        let start_month = moment()
        let end_month = moment().add(12, 'months')
        let between_month = end_month.diff(start_month, 'months')
        for (let i = 0; i <= between_month; i++) {
          days = this.getDays(start_month.year(), start_month.format('MM'), block_number);
          this.calendars.push({
            date: start_month.format('YYYY/MM'),
            year: start_month.year(),
            month: start_month.month(), 
            start_block_number: block_number,
            calendar: days.length,
            days: days
          })
          start_month.add(1, 'months')
          block_number = days[days.length - 1].block_number
          block_number++;
        }
        return block_number;
      },    
      getWindowSize() {
          this.inner_width = window.innerWidth;
          this.inner_height = window.innerHeight;
          this.task_width = this.$refs.task.offsetWidth;
          this.task_height = this.$refs.task.offsetHeight;
      },
      todayPosition() {
        this.$refs.calendar.scrollLeft = this.scrollDistance
      },
    },
    computed: {
      calendarViewWidth() {
        return this.inner_width - this.task_width;
      },
      calendarViewHeight() {
        return this.inner_height - this.task_height - 48 - 60 - 80;
      },
      scrollDistance() {
        let start_date = moment(this.start_month);
        let between_days = this.today.diff(start_date, 'days')
        return between_days* this.block_size;
      },
    },
    mounted() {
      this.fetchData();
      this.getCalendar();
      this.getWindowSize();
      this.$nextTick(() => {
      this.todayPosition();
      });
      window.addEventListener('resize', this.getWindowSize);
    }
  }).mount('#app')

</script>